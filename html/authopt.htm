<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<title>Authentication Options</title>
</head>
<body>
<h3>Authentication Options</h3>

<img align="left" src="pic/alice44.gif" alt="gif"><a href=
"http://www.eecis.udel.edu/~mills/pictures.htm">from <i>Alice's
Adventures in Wonderland</i>, Lewis Carroll</a> 

<p>Our resident cryptographer; now you see him, now you don't.<br
clear="left">
</p>

<hr>
<h4>Authentication Support</h4>

<p>Authentication support allows the NTP client to verify that the
server is in fact known and trusted and not an intruder intending
accidentally or on purpose to masquerade as that server. The NTPv3
specification RFC-1305 defines a scheme which provides
cryptographic authentication of received NTP packets. Originally,
this was done using the Data Encryption Standard (DES) algorithm
operating in Cipher Block Chaining (CBC) mode, commonly called
DES-CBC. Subsequently, this was augmented by the RSA Message Digest
5 (MD5) algorithm using a private key, commonly called keyed-MD5.
Either algorithm computes a message digest, or one-way hash, which
can be used to verify the server has the correct private key and
key identifier.</p>

<p>NTPv4 retains the NTPv3 scheme, properly described as symmetric
key cryptography and, in addition, provides a new Autokey scheme
based on public key cryptography. Public key cryptography is
generally considered more secure than symmetric key cryptography,
since the security is based on a private value which is generated
by each server and never revealed. With Autokey all key
distribution and management functions involve only public values,
which considerably simplifies key distribution and storage. Public
key management is based on X.509 certificates, which can be
provided by commercial services or produced by utility programs in
the OpenSSL software library or the NTPv4 distribution.</p>

<p>Authentication is configured separately for each association
using the <tt>key</tt> or <tt>autokey</tt> subcommand on the <tt>
peer</tt>, <tt>server</tt>, <tt>broadcast</tt> and <tt>
manycastclient</tt> configuration commands as described in the <a
href="config.htm">Configuration Options</a> page. The
authentication options described below specify the suite of keys,
select the key for each configured association and manage the
configuration operations. In addition, if public key cryptography
is enabled, the commands specify the message digest and signature
encryption scheme.</p>

<p>The <tt>auth</tt> flag controls whether new associations or
remote configuration commands require cryptographic authentication.
This flag can be set or reset by the <tt>enable</tt> and <tt>
disable</tt> commands and also by remote configuration commands
sent by a <tt>ntpdc</tt> program running in another machine. If
this flag is enabled, which is the default case, new broadcast
client and symmetric passive associations and remote configuration
commands must be cryptographically authenticated using either
symmetric key or public key schemes. If this flag is disabled,
these operations are effective even if not cryptographic
authenticated. It should be understood that operating in the latter
mode invites a significant vulnerability where a rogue hacker can
seriously disrupt system timekeeping.</p>

<p>In networks with firewalls and large numbers of broadcast
clients it may be acceptable to disable authentication, since that
avoids key distribution and simplifies network maintenance.
However, when the configuration file contains host names, or when a
server or client is configured remotely, host names are resolved
using the DNS and a separate name resolution process. In order to
protect against bogus configuration messages, name resolution
messages are authenticated using an internally generated key which
is normally invisible to the user. However, if cryptographic
support is disabled, the name resolution process will fail. This
can be avoided either by specifying IP addresses instead of host
names, which is generally inadvisable, or by enabling the <tt>
auth</tt>flag for name resolution and disabled it once the name
resolution process is complete.</p>

<p>An attractive alternative where multicast support is available
is manycast mode, in which clients periodically troll for servers
as described in the <a href="assoc.htm">Association Management</a>
page. . Cryptographic authentication in this mode the Autokey
protocol described below. The principle advantage of manycast mode
is that potential servers need not be configured in advance, since
the client finds them during regular operation, and the
configuration files for all clients can be identical.</p>

<p>While the algorithms for symmetric key cryptography are included
in the NTPv4 distribution, public key cryptography requires the
OpenSSL software library to be installed before building the NTP
distribution. Public key cryptography provides secure
authentication of servers without compromising accuracy and
stability. The security model and protocol schemes for both
symmetric key and public key cryptography are summarized below and
detailed in the briefings, papers and reports at <a href=
"http://www.ntp.org">www.ntp.org</a>.</p>

<h4>Symmetric Key Cryptography</h4>

The original RFC-1305 specification allows any one of possibly
65,534 keys, each distinguished by a 32-bit key identifier, to
authenticate an association. The servers and clients involved must
agree on the key and key identifier to authenticate their messages.
Keys and related information are specified in a key file, usually
called <tt>ntp.keys</tt>, which must be exchanged and stored using
secure procedures beyond the scope of the NTP protocol itself.
Besides the keys used for ordinary NTP associations, additional
keys can be used as passwords for the <tt><a href="ntpq.htm">
ntpq</a></tt> and <tt><a href="ntpdc.htm">ntpdc</a></tt> utility
programs. 

<p>When <tt>ntpd</tt> is first started, it reads the key file
specified in the <tt>keys</tt> configuration command and installs
the keys in the key cache. However, individual keys must be
activated with the <tt>trusted</tt> command before use. This
allows, for instance, the installation of possibly several batches
of keys and then activating or deactivating each batch remotely
using <tt>ntpdc</tt>. This also provides a revocation capability
that can be used if a key becomes compromised. The <tt>
requestkey</tt> command selects the key used as the password for
the <tt>ntpdc</tt> utility, while the <tt>controlkey</tt> command
selects the key used as the password for the <tt>ntpq</tt>
utility.</p>

<h4>Public Key Cryptography</h4>

<p>NTPv4 supports the original NTPv3 symmetric key scheme described
in RFC-1305 and in addition the Autokey protocol, which is based on
public key cryptography. The Autokey Version 2 protocol verifies
packet integrity using MD5 message digests and verifies the source
with digital signatures and any of several digest/signature schemes
available in the OpenSSL software library. This library is
available from <a href="http://www.openssl.org">
http://www.openssl.org</a> and can be installed using the
procedures outlined in the <a href="build.htm">Building and
Installing the Distribution</a> page. Once installed, the configure
and build process automatically detects the library and links the
interface routines required.</p>

<p>The Autokey protocol has several modes of operation
corresponding to the various NTP modes supported. Digital
signatures with any of several message digest and signature
encryption schemes are used in all modes to verify that the server
is authentic and not an intruder. Most modes use a special cookie
which can be computed independently by the client and server, but
encrypted in transmission. All modes use in addition a variant of
the S-KEY scheme, in which a pseudo-random key list is generated
and used in reverse order. These schemes are described along with
an executive summary, current status, briefing slides and reading
list, on the <a href=
"http://www.eecis.udel.edu/~mills/autokey.htm">Autonomous
Authentication</a> page.</p>

<p>The specific cryptographic environment used by Autokey servers
and clients is determined by a set of files and soft links. This
includes a host key file, certificate file and optional sign file
and leapsecond file. The digest/signature scheme is specified in
the X.509 certificate configured during installation along with the
matching sign key. There are several schemes available in the
OpenSSL software library, each identified by a specific string such
as <tt>RSA_MD5</tt>, which stands for the MD5 message digest with
RSA encryption scheme. The current NTP distribution supports all
the schemes in the OpenSSL library, including those based on RSA
and DSA digital signatures. The schemes currently available are
described in the <a href="genkeys.htm"><tt>ntp-genkeys</tt></a>
page.</p>

<p>The digest/signature scheme and certificate are provided to
dependent clients in the Autokey protocol. Different client or peer
associations can use different schemes; each of two symmetric peers
can use different schemes. Note that the digest/signature scheme is
separate and distinct from the NTP message digest used to construct
the packet message authentication code (MAC). The only requirement
is that the server private key and signature algorithm must match
the public key and verification algorithm specified in the
certificate.</p>

<h4>Key Management</h4>

<p>The cryptographic values used by the Autokey protocol are
incorporated as a set of files generated by the <a href=
"genkeys.htm"><tt>ntp-genkeys</tt></a> utility program, including
the required symmetric keys, host key pair and public certificate
files and optional sign key and leapseconds files. The symmetric
keys file is necessary for the <tt>ntpq</tt> and <tt>ntpdc</tt>
utility programs. The remaining files are necessary for the Autokey
protocols to function. The files incorporate cryptographic values
generated by the OpenSSL library algorithms and are in printable
PEM-encoded ASCII format. Further information about these files and
how they are generated and installed is on the <tt>ntp-genkeys</tt>
page.</p>

<p>All key files are installed by default in <tt>
/usr/local/etc</tt>, which is normally in a shared filesystem in
NFS-mounted networks and avoids installing them in each machine
separately. The default can be overridden by the <tt>keysdir</tt>
configuration command. Since uniqueness is insured by the hostname
and filestamp extensions in the file name, the files for a NFS
server and dependent clients can all be installed in the same
directory. This is different than the original Autokey version 1
support, which required the private key to be installed separately
for each client.</p>

<p>The recommended practice is to keep the file name extensions
when installing a file and to install a soft link from the default
name specified in the <tt>ntp-genkeys</tt> page to the actual file.
This allows new file generations to be activated simply by changing
the link. However, <tt>ntpd</tt> parses the link name when present
to extract the filestamp and sends it along with the public key and
host name when requested. This allows clients to verify that the
file and generation time are always current. The actual location of
each file can be overridden by the <tt>crypto</tt> configuration
command, but this is not recommended.</p>

<p>All cryptographic keys and related values should be regenerated
on a periodic and automatic basis, like once per month. The <tt>
ntp-genkeys</tt> program uses the same timestamp extension for all
files generated at one time, so each generation is distinct and can
be readily recognized in monitoring data. While a host key pair and
certificate must be generated by every server and peer, the
certificates do not need to be explicitly copied to all machines in
the same security compartment, since they can be obtained
automatically using the Autokey protocol.</p>

<p>Servers and peers can make a new generation in the following
way. All machines have loaded the old generation at startup and are
operating normally. At designated intervals, each machine generates
a new public/private key pair and certificate and makes links from
the default file names to the new file names. The <tt>ntpd</tt>
daemon is then restarted and loads the new generation, with result
clients no longer can authenticate correctly. The Autokey protocol
is designed so that after a few minutes the clients time out and
restart the protocol from the beginning, with result the new
generation is loaded and operation continues as before.</p>

<h4>Random Seed File</h4>

<p>All cryptographically sound key generation schemes must have
means to randomize the entropy seed used to initialize the internal
random number generator of the library. It is important to
understand that entropy must be evolved for each generation, for
otherwise the random number sequence would be predictable. Various
means dependent on external events, such as keystroke intervals,
can be used to do this and some systems have built-in entropy
sources. Suitable means are described in the OpenSSL software
documentation, but are outside the scope of this page.</p>

<p>The entropy seed used by the OpenSSL library is contained in a
file, usually called <tt>.rnd</tt>, which must be available when
starting the NTP daemon or the <tt>ntp-genkeys</tt> program. The
NTP daemon will first look for the file using the path specified by
the <tt>random</tt> subcommand of the <tt>crypto</tt> command. If
not specified in this way, or when starting the <tt>
ntp-genkeys</tt> program, the OpenSSL library will look for the
file using the path specified by the <tt>RANDFILE</tt> environment
variable in the user home directory, whether root or some other
user. If the <tt>RANDFILE</tt> environment variable is not present,
the library will look for the <tt>.rnd</tt> file in the user home
directory. Alternatively, the location can be specified by the <tt>
randfile</tt> keyword of the <tt>crypto</tt> configuration command.
If the file is not available or cannot be written, the daemon exits
with a message to the system log and the <tt>ntp-genkeys</tt>
program exits with a suitable error message.</p>

<p>The daemon will occasionally add additional entropy and write to
the file when computing a Diffie-Hellman agreement value, for
example, so the file must be writable by root. If the <tt>
ntp-genkeys</tt> program is run by other than root, or if the Unix
<tt>su</tt> command is used to assume root, the home directory
assumed by the OpenSSL library might not be root. Probably the
safest way to generate keys is to log in as root, change to the
keys directory and run the <tt>ntp-genkeys</tt> program from
there</p>

<h4>Authentication Commands</h4>

<dl>
<dt><tt>autokey [<i>logsec</i>]</tt></dt>

<dd>Specifies the interval between regenerations of the session key
list used with the Autokey protocol. Note that the size of the key
list for each association depends on this interval and the current
poll interval. The default value is 12 (4096 s or about 1.1 hours).
For poll intervals above the specified interval, a session key list
with a single entry will be regenerated for every message
sent.</dd>

<dt><tt>controlkey <i>key</i></tt></dt>

<dd>Specifies the key identifier to use with the <a href=
"ntpq.htm"><tt>ntpq</tt></a> utility, which uses the standard
protocol defined in RFC-1305. The <tt><i>key</i></tt> argument is
the key identifier for a trusted key, where the value can be in the
range 1 to 65,534, inclusive.</dd>

<dt><tt>crypto [certificate <i>file</i>] [leap <i>file</i>]
[randfile <i>file</i>] [rsakey <i>file</i>] [signkey <i>
file</i>]</tt></dt>

<dd>This command requires the OpenSSL library. It activates public
key cryptography, selects the message digest and signature
encryption scheme and loads the required private and public values
described above. If one or more files are left unspecified, the
default names are used as described above. Following are the
subcommands:</dd>

<dd>
<dl>
<dt><tt>certificate <i>file</i></tt></dt>

<dd>Specifies the location of the public certificate file, which by
default is linked from <tt>ntpkey_cert_<i>hostname</i></tt> in the
keys directory.</dd>

<dt><tt>leap <i>file</i></tt></dt>

<dd>Specifies the location of the optional leapsecond table file,
which by default is linked from <tt>ntpkey_leap</tt> in the keys
directory.</dd>

<dt><tt>randfile <i>file</i></tt></dt>

<dd>Specifies the location of the random seed file used by the
OpenSSL library. The defaults are described in the main text
above.</dd>

<dt><tt>rsakey <i>file</i></tt></dt>

<dd>Specifies the location of the public/private key file, which by
default is linked from <tt>ntpkey_key_<i>hostname</i></tt> in the
keys directory.</dd>

<dt><tt>signkey <i>file</i></tt></dt>

<dd>Specifies the location of the optional sign key file used to
construct digital signatures, which by default is linked from <tt>
ntpkey_sign_<i>hostname</i></tt> in the keys directory. If this
file is not present, the <tt>rsakey</tt> file is used.</dd>
</dl>
</dd>

<dt><tt>keys <i>keyfile</i></tt></dt>

<dd>Specifies the location of the MD5 symmetric key file containing
the keys and key identifiers used by <tt>ntpd</tt>, <tt>ntpq</tt>
and <tt>ntpdc</tt> when operating with symmetric key
cryptography.</dd>

<dt><tt>keysdir <i>path</i></tt></dt>

<dd>This command requires the OpenSSL library. It specifies the
default directory path for the cryptographic files generated by the
<tt>ntp-genkeys</tt> program. The default is <tt>
/usr/local/etc/</tt>.</dd>

<dt><tt>requestkey <i>key</i></tt></dt>

<dd>Specifies the key identifier to use with the <a href=
"ntpdc.htm"><tt>ntpdc</tt></a> utility program, which uses a
proprietary protocol specific to this implementation of <tt>
ntpd</tt>. The <tt><i>key</i></tt> argument is a key identifier for
the trusted key, where the value can be in the range 1 to 65,534,
inclusive.</dd>

<dt><tt>revoke [<i>logsec</i>]</tt></dt>

<dd>Specifies the interval between re-randomization of certain
cryptographic values used by the Autokey scheme, as a power of 2 in
seconds. These values need to be updated frequently in order to
deflect brute-force attacks on the algorithms of the scheme;
however, updating some values is a relatively expensive operation.
The default interval is 16 (65,536 s or about 18 hours). For poll
intervals above the specified interval, the values will be updated
for every message sent.</dd>

<dt><tt>trustedkey <i>key</i> [...]</tt></dt>

<dd>Specifies the key identifiers which are trusted for the
purposes of authenticating peers with symmetric key cryptography,
as well as keys used by the <tt>ntpq</tt> and <tt>ntpdc</tt>
programs. The authentication procedures require that both the local
and remote servers share the same key and key identifier for this
purpose, although different keys can be used with different
servers. The <tt><i>key</i></tt> arguments are 32-bit unsigned
integers with values from 1 to 65,534.</dd>
</dl>

<h4>Error Codes</h4>

<p>The following error codes are reported via the NTP control and
monitoring protocol trap mechanism.</p>

<dl>
<dt>101 (bad field length)</dt>

<dd>The packet has invalid version, length or format.</dd>

<dt>102 (bad timestamp)</dt>

<dd>The packet timestamp is the same or older than the most recent
received. This could be due to a replay or a server clock time
step.</dd>

<dt>103 (bad filestamp)</dt>

<dd>The packet filestamp is the same or older than the most recent
received. This could be due to a replay or a key file generation
error.</dd>

<dt>104 (bad public key)</dt>

<dd>The public key is missing, has incorrect format or is an
unsupported type.</dd>

<dt>105 (unsupported digest type)</dt>

<dd>The server requires an unsupported digest/signature
scheme.</dd>

<dt>106 (mismatched digest types)</dt>

<dd>Not used.</dd>

<dt>107 (bad signature length)</dt>

<dd>The signature length does not match the current public
key.</dd>

<dt>108 (signature not verified)</dt>

<dd>The message fails the signature check. It could be bogus or
signed by a different private key.</dd>

<dt>109 (subject hostname mismatch)</dt>

<dd>The host name is invalid or does not match the subject name in
the certificate.</dd>

<dt>110 (time not verified)</dt>

<dd>The certificate is not yet valid or has expired.</dd>

<dt>111 (bad cookie encrypt)</dt>

<dd>The cookie is corrupted or bogus.</dd>

<dt>112 (bad TAI data)</dt>

<dd>The leapseconds file is currupted or bogus.</dd>
</dl>

<h4>Files</h4>

<p>See the <a href="genkeys.htm"><tt>ntp-genkeys</tt></a> page.</p>

<h4>Bugs</h4>

<p>The mysterious Digital Signature Algorithm (DSA) in the OpenSSL
library should be conquered and provisioned.</p>

<hr>
<a href="index.htm"><img align="left" src="pic/home.gif" alt=
"gif"></a> 

<address><a href="mailto:mills@udel.edu">David L. Mills
&lt;mills@udel.edu&gt;</a></address>
</body>
</html>

