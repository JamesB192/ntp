<html><head><title>
Authentication Options
</title></head><body><h3>
Authentication Options
</h3><hr>

<H4>Authentication Support</H4>

Authentication support allows the NTP client to verify that the server
is in fact known and trusted and not an intruder intending accidentally
or on purpose to masquerade as that server. The NTPv3 specification
RFC-1305 defines an scheme which provides cryptographic authentication
of received NTP packets. Originally, this was done using the Data
Encryption Standard (DES) operating in Cipher Block Chaining (CBC) mode,
commonly called DES-CBC. Subsequently, this was augmented by the RSA
Message Digest 5 (MD5) using a private key, commonly called keyed-MD5.
Either algorithm computes a message digest, or one-way hash, which can
be used to verify the server has the correct private key and key
identifier.

<p>NTPv4 retains the NTPv3 schemes and, in addition, provides a new
<I>autokey</I> scheme based on reverse hashing and public key
cryptography. Authentication can be configured separately for each
association using the <TT>key</TT> or <TT>autokey</TT> subcommands on
the <TT>peer</TT>, <TT>server</TT>, <TT>broadcast</TT> and
<TT>manycastclient</TT> commands as described in the <A
HREF="config.htm">Configuration Options</A> page.

<P>The authentication options specify the suite of keys, select the key
for each configured association and manage the configuration operations,
as described below. The <TT>auth</TT> flag which controls these
functions can be set or reset by the <TT>enable</TT> and
<TT>disable</TT> configuration commands and also by remote configuration
commands sent by a <TT>ntpdc</TT> program running in another machine. If
this flag is set, persistent peer associations and remote configuration
commands are effective only if cryptographically authenticated. If this
flag is disabled, these operations are effective even if not
cryptographic authenticated. It should be understood that operating in
the latter mode invites a significant vulnerability where a rogue hacker
can seriously disrupt client timekeeping.

<P>The <TT>auth</TT> flag affects all authentication procedures
described below; however, it operates differently if cryptographic
support is compiled in the distribution. If this support is available
and the flag is enabled, then persistent associations are mobilized and
remote configuration commands are effective only if successfully
authenticated. If the support is unavailable and the flag is enabled,
then it is not possible under any conditions to mobilize persistent
associations or respond to remote configuration commands. The
<TT>auth</TT> flag normally defaults to set if cryptographic support is
available and to reset otherwise.

<P>With the above vulnerabilities in mind, it is desirable to set the
<tt>auth</TT> flag in all cases. One aspect which is often confusing is
the name resolution process which maps server names in the configuration
file to IP addresses. In order to protect against bogus name server
messages, this process is authenticated using an internally generated
key which is normally invisible to the user. However, if cryptographic
support is unavailable and the <TT>auth</TT> flag is enabled, the name
resolution process will fail. This can be avoided either by specifying
IP addresses instead of host names, which is generally inadvisable, or
by leaving the flag disabled and enabling it once the name resolution
process is complete.

<H4>Private Key Scheme</H4>
The original RFC-1305 specification allows any one of possibly 65,534
keys, each distinguished a 32-bit key identifier, to authenticate an
association. The servers involved must agree on the key and key
identifier to authenticate their messages. Keys and related information
are specified in a key file, usually called <TT>ntp.keys</TT>, which
should be exchanged and stored using secure procedures beyond the scope
of the NTP protocol itself. Besides the keys used for ordinary NTP
associations, additional ones can be used as passwords for the <TT><A
HREF="ntpq.htm">ntpq</A></TT> and <TT><A HREF="ntpdc.htm">ntpdc</A></TT>
utility programs.

<P>When <TT>ntpd</TT> is first started, it reads the key file and
installs the keys in the key cache. However, the keys must be activated
before they can be used with the <TT>trusted</TT> command. This allows,
for instance, the installation of possibly several batches of keys and
then activating or deactivating each batch remotely using
<TT>ntpdc</TT>. This also provides a revocation capability that can be
used if a key becomes compromised. The <TT>requestkey</TT> command
selects the key used as the password for the <TT>ntpdc</TT> utility,
while the <TT>controlkey</TT> command selects the key used as the
password for the the <TT>ntpq</TT> utility.

<H4>Autokey Schemes</H4>

The original NTPv3 authentication scheme described in RFC-1305 continues
to be supported. In NTPv4 an additional authentication scheme called
<I>autokey</I> is available. It has several modes of operation
corresponding to the various NTP modes supported. Broadcast/multicast
mode uses a variant of the S-KEY scheme, in which a pseudo-random key
list is generated and used in the reverse order. Client/server mode uses
a similar scheme together with a special cookie which can be computed
separately by the client and server. Symmetric mode uses the
Diffie-Hellman algorithm and the Station-to-Station key agreement
protocol. RSA public signatures are used in all modes to verify the
source. The scheme is described along with an executive summary, current
status, briefing slides and reading list, at
www.eecis.udel.edu/~mills/autokey.htm.

<p>The cryptographic values used by the <tt>autokey</tt> scheme are
incorporated as a set of four files generated by the <a
href=genkeys.htm><tt>ntp_genkeys</tt></a> program, including the DES/MD5
private keys, RSA public/private key pair, and the parameters for the
Diffie-Hellman key-agreement algorithm. See the <tt>ntp_genkeys</tt>
page for a description of the format and use of these files. They
contain cryptographic values generated by the algorithms of the
<tt>rsaref20</tt> package and are in printable ASCII format. Since the
algorythms are seeded by the system clock, each run of this program will
produce a different outcome.

<p>The <tt>ntp.keys</tt> file contains the private MD5 keys. It must be
distributed by secure means to other servers and clients sharing the
same security compartment and made visible only to root. The
<tt>ntpkey</tt> file contains the RSA private key. It is useful only to
the machine that generated it and never shared with any other daemon or
application program, so must be made visible only to root. The
<tt>ntp_dh</tt> file contains the parameters for the Diffie-Hellman key
agreement algorithm. It is necessary that all servers and clients of a
security compartment share a single <tt>ntp_dh</tt> file, but it does
not matter which one. This file can be distributed using insecure means,
since the data are public values.

<p>The <tt>ntpkey_<i>host</i></tt> file contains the RSA public key,
where <tt><i>host</i></tt> is the DNS name of the host that generated
it. Each server and client sharing a NTP association must have the
<tt>ntpkey_<i>host</i></tt> file for itself and its associate, with the
exception of broadcast servers, which do not authenticate the clients..
These files can be widely distributed and stored using insecure means,
since the data are public values.

<p>Public keys can be attached to associations in three ways. For
configured associations the default public key file name is formed from
the prefix "ntpkey_" concatenated with the canonical host name found
during the DNS name resolution process. Alternately, the file  name can
be specified using the <tt>publickey</tt> argument to the
<tt>server</tt> or <tt>peer</tt> configuration commands. If for some
reason the file cannot be found, the daemon can request the public key
directly from its peer, but only if enabled by the special file name
"peer".

<H4>Authentication Commands</H4>

<DL>

<dt><tt>autokey [<i>logsec</i>]</tt>
<dd>Specifies the interval between regenerations of the session key list
used with the autokey feature. Note that the size of the key list for
each association depends on this interval and the current poll interval.
The default value is 12 (4096 s or about 1.1 hours). For poll intervals
above the specified interval, a session key list with a single entry
will be regenerated for every message sent.</dd>

<DT><TT>controlkey <I>key</I></TT></DT>
<DD>Specifies the key identifier to use with the <TT>ntpq</TT> program,
which uses the standard protocol defined in RFC-1305. This program is
useful to diagnose and repair problems that affect <TT>ntpd</TT>
operation. The <TT><I>key</I></TT> argument to this command is a key
identifier for a trusted key, where the value can be in the range 1 to
65534, inclusive. If no <TT>controlkey</TT> command present in the
configuration file, or if the keys disagree, any request to change a
server variable with be denied.</DD>

<DT><TT>crypto [privatekey <i>file</i>] [publickey <i>file</i>] [dhparms
<i>file</i>] </TT></DT>
<DD>This command requires the NTP daemon build process be configured
with the RSA library. The presence of this command causes the daemon to
load the host RSA private key file, public key file and Diffie-Hellman
parameter file. If one or more files are left unspecified, the default
names are used as described above.</DD>

<DT><TT>keys <I>keyfile</I></TT></DT>
<DD>Specifies the file name containing the private encryption keys and
key identifiers used by <TT>ntpd</TT>, <TT>ntpq</TT> and <TT>ntpdc</TT>
when operating in authenticated mode. The format of this file is
described later in this document.</DD>

<DT><TT>keysdir <I>path</I></TT></DT>
<DD>This command requires the NTP daemon build process be configured
with the RSA library. It specifies the directory path for the private
key file, parameters file and one or more public key files. The default
when this command does not appear in the configuration file is
<tt>/usr/local/etc/</tt>.</dd>

<DT><TT>requestkey <I>key</I></TT></DT>
<DD>Specifies the key identifier to use with the <TT>ntpdc</TT> utility
program, which uses a proprietary protocol specific to this
implementation of <TT>ntpd</TT>. This program is useful to diagnose and
repair problems that affect <TT>ntpd</TT> operation. The
<TT><I>key</I></TT> argument to this command is a key identifier for a
trusted key, where the value can be in the range 1 to 65534, inclusive.
If no <TT>requestkey</TT> command present in the configuration file, or
if the keys disagree, any request to change a server variable with be
denied.</DD>

<dt><tt>revoke [<i>logsec</i>]</tt>
<dd>Specifies the interval between re-randomization of certain
cryptographic values used by the autokey scheme, as a power of 2 in
seconds. These values need to be updated frequently in order to deflect
brute-force attacks on the algorithms of the scheme; however, updating
some values is a relatively expensive operation. The default interval is
12 (65,536 s or about 18 hours). For poll intervals above the specified
interval, the values will be updated for every message sent.</dd>

<DT><TT>trustedkey <I>key</I> [...]</TT></DT>
<DD>Specifies the encryption key identifiers which are trusted for the
purposes of authenticating peers suitable for synchronization, as well
as keys used by the <TT>ntpq</TT> and <TT>ntpdc</TT> programs. The
authentication procedures require that both the local and remote servers
share the same key and key identifier for this purpose, although
different keys can be used with different servers. The
<TT><I>key</I></TT> arguments are 32-bit unsigned integers with values
from 1 to 65,534. Note that NTP key 0 is used to indicate an invalid key
and/or key identifier, so should not be used for any other purpose.</DD>

</DL>

<H4>Authentication Key File Format</H4>

In the case of DES, the keys are 56 bits long with, depending on type,
a parity check on each byte. In the case of MD5, the keys are 64 bits (8
bytes). <TT>ntpd</TT> reads its keys from a file specified using the
<TT>-k</TT> command line option or the <TT>keys</TT> statement in the
configuration file. While key number 0 is fixed by the NTP standard (as
56 zero bits) and may not be changed, one or more of the keys numbered 1
through 15 may be arbitrarily set in the keys file.

<P>The key file uses the same comment conventions as the configuration
file. Key entries use a fixed format of the form

<P><I><TT>keyno type key</TT></I>

<P>where <I><TT>keyno</TT></I> is a positive integer,
<I><TT>type</TT></I> is a single character which defines the key format,
and <I><TT>key</TT></I> is the key itself.

<P>The key may be given in one of three different formats, controlled by
the <I><TT>type</TT></I> character. The three key types, and
corresponding formats, are listed following.

<DL>

<DT><TT>S</TT></DT>
<DD>The key is a 64-bit hexadecimal number in the format specified in
the DES specification; that is, the high order seven bits of each octet
are used to form the 56-bit key while the low order bit of each octet is
given a value such that odd parity is maintained for the octet. Leading
zeroes must be specified (i.e., the key must be exactly 16 hex digits
long) and odd parity must be maintained. Hence a zero key, in standard
format, would be given as <TT>0101010101010101</TT>.</DD>

<DT><TT>N</TT></DT>
<DD>The key is a 64-bit hexadecimal number in the format specified in
the NTP standard. This is the same as the DES format, except the bits in
each octet have been rotated one bit right so that the parity bit is now
the high order bit of the octet. Leading zeroes must be specified and
odd parity must be maintained. A zero key in NTP format would be
specified as <TT>8080808080808080</TT>.</DD>

<DT><TT>A</TT></DT>
<DD>The key is a 1-to-8 character ASCII string. A key is formed from
this by using the low order 7 bits of each ASCII character in the
string, with zeroes added on the right when necessary to form a full
width 56-bit key, in the same way that encryption keys are formed from
Unix passwords.</DD>

<DT><TT>M</TT></DT>
<DD>The key is a 1-to-8 character ASCII string, using the MD5
authentication scheme. Note that both the keys and the authentication
schemes (DES or MD5) must be identical between a set of peers sharing
the same key number.</DD>

</DL>

<p>Note that the keys used by the <TT>ntpq</TT> and <TT>ntpdc</TT>
programs are checked against passwords requested by the programs and
entered by hand, so it is generally appropriate to specify these keys in
ASCII format.

<h4>Files</h4>

<tt>ntp.keys</tt> private MD5 keys
<br><tt>ntpkey</tt> RSA private key
<br><tt>ntpkey_<i>host</i></tt> RSA public key
<br><tt>ntp_dh</tt> Diffie-Hellman parameters

<h4>Bugs</h4>

The <tt>ntpkey_<i>host</i></tt> files are really digital certificates.
These should be obtained via secure directory services when they become
universally available.

<hr><a href=index.htm><img align=left src=pic/home.gif></a><address><a
href=mailto:mills@udel.edu> David L. Mills &lt;mills@udel.edu&gt;</a>
</address></a></body></html>
