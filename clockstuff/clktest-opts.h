/*   -*- buffer-read-only: t -*- vi: set ro:
 *  
 *  DO NOT EDIT THIS FILE   (clktest-opts.h)
 *  
 *  It has been AutoGen-ed  Tuesday June 27, 2006 at 10:16:45 PM EDT
 *  From the definitions    clktest-opts.def
 *  and the template file   options
 */
/*
 *  This file contains the programmatic interface to the Automated
 *  Options generated for the clktest program.
 *  These macros are documented in the AutoGen info file in the
 *  "AutoOpts" chapter.  Please refer to that doc for usage help.
 */
#ifndef AUTOOPTS_CLKTEST_OPTS_H_GUARD
#define AUTOOPTS_CLKTEST_OPTS_H_GUARD

/*
 * clktest copyright 1970-2006 ntp.org - all rights reserved
 *
 * see html/copyright.html
 */
#include "config.h"
#include <autoopts/options.h>

/*
 *  Ensure that the library used for compiling this generated header is at
 *  least as new as the version current when the header template was released
 *  (not counting patch version increments).  Also ensure that the oldest
 *  tolerable version is at least as old as what was current when the header
 *  template was released.
 */
#define AO_TEMPLATE_VERSION 110592
#if (AO_TEMPLATE_VERSION < OPTIONS_MINIMUM_VERSION) \
 || (AO_TEMPLATE_VERSION > OPTIONS_STRUCT_VERSION)
# error option template version mismatches autoopts/options.h header
#endif

/*
 *  Enumeration of each option:
 */
typedef enum {
        INDEX_OPT_MAGIC2           =  0,
        INDEX_OPT_MAGIC1           =  1,
        INDEX_OPT_MAGIC1           =  2,
        INDEX_OPT_SPEED            =  3,
        INDEX_OPT_DEBUG            =  4,
        INDEX_OPT_CRMOD            =  5,
        INDEX_OPT_COMMAND          =  6,
        INDEX_OPT_TIMEOUT          =  7,
        INDEX_OPT_VERSION          = 8,
        INDEX_OPT_HELP             = 9,
        INDEX_OPT_MORE_HELP        = 10,
        INDEX_OPT_SAVE_OPTS        = 11,
        INDEX_OPT_LOAD_OPTS        = 12
} teOptIndex;

#define OPTION_CT    13
#define CLKTEST_VERSION       "4.2.3p12"
#define CLKTEST_FULL_VERSION  "clktest - test the clock line discipline - Ver. 4.2.3p12"

/*
 *  Interface defines for all options.  Replace "n" with
 *  the UPPER_CASED option name (as in the teOptIndex
 *  enumeration above).  e.g. HAVE_OPT( MAGIC2 )
 */
#define        DESC(n) clktestOptions.pOptDesc[INDEX_OPT_ ## n]
#define     HAVE_OPT(n) (! UNUSED_OPT(& DESC(n)))
#define      OPT_ARG(n) (DESC(n).pzLastArg)
#define    STATE_OPT(n) (DESC(n).fOptState & OPTST_SET_MASK)
#define    COUNT_OPT(n) (DESC(n).optOccCt)
#define    ISSEL_OPT(n) (SELECTED_OPT(&DESC(n)))
#define ISUNUSED_OPT(n) (UNUSED_OPT(& DESC(n)))
#define  ENABLED_OPT(n) (! DISABLED_OPT(& DESC(n)))
#define  STACKCT_OPT(n) (((tArgList*)(DESC(n).optCookie))->useCt)
#define STACKLST_OPT(n) (((tArgList*)(DESC(n).optCookie))->apzArgs)
#define    CLEAR_OPT(n) STMTS( \
                DESC(n).fOptState &= OPTST_PERSISTENT;   \
                if ( (DESC(n).fOptState & OPTST_INITENABLED) == 0) \
                    DESC(n).fOptState |= OPTST_DISABLED; \
                DESC(n).optCookie = NULL )

/*
 *  Interface defines for specific options.
 */
#ifdef CLKLDISC
#define VALUE_OPT_MAGIC2         'a'
#define OPT_VALUE_MAGIC2         (*(unsigned long*)(&DESC(MAGIC2).pzLastArg))
#endif /* CLKLDISC */
#ifdef CLKLDISC
#define VALUE_OPT_MAGIC1         'c'
#define OPT_VALUE_MAGIC1         (*(unsigned long*)(&DESC(MAGIC1).pzLastArg))
#endif /* CLKLDISC */
#ifdef STREAM
#define VALUE_OPT_MAGIC1         'c'
#endif /* STREAM */
#define VALUE_OPT_SPEED          'b'
#define VALUE_OPT_DEBUG          'd'
#define VALUE_OPT_CRMOD          'f'
#define VALUE_OPT_COMMAND        's'
#define VALUE_OPT_TIMEOUT        't'
#define OPT_VALUE_TIMEOUT        (*(unsigned long*)(&DESC(TIMEOUT).pzLastArg))

#define VALUE_OPT_VERSION       'v'
#define VALUE_OPT_SAVE_OPTS     '>'
#define VALUE_OPT_LOAD_OPTS     '<'
#define VALUE_OPT_HELP          '?'
#define VALUE_OPT_MORE_HELP     '!'
#define SET_OPT_SAVE_OPTS(a)   STMTS( \
        DESC(SAVE_OPTS).fOptState &= OPTST_PERSISTENT; \
        DESC(SAVE_OPTS).fOptState |= OPTST_SET; \
        DESC(SAVE_OPTS).pzLastArg  = (const char*)(a) )
/*
 *  Interface defines not associated with particular options
 */
#define ERRSKIP_OPTERR  STMTS( clktestOptions.fOptSet &= ~OPTPROC_ERRSTOP )
#define ERRSTOP_OPTERR  STMTS( clktestOptions.fOptSet |= OPTPROC_ERRSTOP )
#define RESTART_OPT(n)  STMTS( \
                clktestOptions.curOptIdx = (n); \
                clktestOptions.pzCurOpt  = NULL )
#define START_OPT       RESTART_OPT(1)
#define USAGE(c)        (*clktestOptions.pUsageProc)( &clktestOptions, c )
/* extracted from opthead near line 289 */

/* * * * * *
 *
 *  Declare the clktest option descriptor.
 */
#ifdef  __cplusplus
extern "C" {
#endif

extern tOptions   clktestOptions;

/* * * * * *
 *
 *  Globals exported from the test the clock line discipline option definitions
 */
#include <stdio.h>
#include <ctype.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <signal.h>
#include <netinet/in.h>
#include <sys/ioctl.h>
#include <sys/time.h>
#include <sys/file.h>
#include <sgtty.h>

#include "../include/ntp_fp.h"
#include "../include/ntp.h"
#include "../include/ntp_unixtime.h"

#ifdef CLKLDISC
# define DEFMAGIC	'\r'
#endif

#ifdef CLKLDISC
# ifdef STREAM
#  include <stropts.h>
#  ifdef HAVE_SYS_CLKDEFS_H
#   include <sys/clkdefs.h>
#  endif
#  undef  DEFMAGIC
#  define DEFMAGIC	"\r"
# endif
#endif

#ifndef _
#  if ENABLE_NLS
#    include <stdio.h>
     static inline char* aoGetsText( const char* pz ) {
         if (pz == NULL) return NULL;
         return (char*)gettext( pz );
     }
#    define _(s)  aoGetsText(s)
#  else  /* ENABLE_NLS */
#    define _(s)  s
#  endif /* ENABLE_NLS */
#endif

#ifdef  __cplusplus
}
#endif
#endif /* AUTOOPTS_CLKTEST_OPTS_H_GUARD */
/*
 * Local Variables:
 * Mode: C
 * c-file-style: "stroustrup"
 * indent-tabs-mode: nil
 * End:
 * options.h ends here */
